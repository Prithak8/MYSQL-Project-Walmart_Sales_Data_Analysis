

CREATE DATABASE IF NOT EXISTS Walmart_MYSQL_Project;
USE Walmart_MYSQL_Project;


-- DATA WRANGLING;

CREATE TABLE IF NOT EXISTS sales(
	invoice_id VARCHAR(30) NOT NULL PRIMARY KEY,
    branch VARCHAR(5) NOT NULL,
    city VARCHAR(30) NOT NULL,
    customer_type VARCHAR(30) NOT NULL,
    gender VARCHAR(30) NOT NULL,
    product_line VARCHAR(100) NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    quantity INT NOT NULL,
    tax_pct FLOAT(6,4) NOT NULL,
    total DECIMAL(12, 4) NOT NULL,
    date DATETIME NOT NULL,
    time TIME NOT NULL,
    payment VARCHAR(15) NOT NULL,
    cogs DECIMAL(10,2) NOT NULL,
    gross_margin_pct FLOAT(11,9),
    gross_income DECIMAL(12, 4),
    rating FLOAT(2, 1)
);

desc sales;


-- FEATURE ENGINEERING

-- 1) time_of_day


## Rough

SELECT time,
CASE
WHEN time BETWEEN '00:00:00' AND '11:59:59' THEN 'Morning'
WHEN time BETWEEN '12:00:00' AND '15:59:59' THEN 'Afternoon'
ELSE 'Evening'
END AS time_of_day
FROM SALES;

-- ADDING COLUMN

ALTER TABLE SALES
ADD COLUMN time_of_day TEXT NOT NULL;

-- INSERTING DATA
UPDATE SALES
SET time_of_day=(
CASE
WHEN time BETWEEN '00:00:00' AND '11:59:59' THEN 'Morning'
WHEN time BETWEEN '12:00:00' AND '15:59:59' THEN 'Afternoon'
ELSE 'Evening'
END
);


-- 2 day_name

-- REQUIRED COLUMN DATA:

SELECT DAYNAME(DATE)
FROM SALES;


-- ADDING COLUMN

ALTER TABLE SALES
ADD COLUMN day_name VARCHAR(50);


-- INSERTING DATA

UPDATE SALES
SET day_name=dayname(DATE);



-- 3) month_name


-- REQUIRED COLUMN
SELECT monthname(DATE)
FROM SALES;


-- ADDING NEW COLUMN

ALTER TABLE SALES
ADD COLUMN month_name VARCHAR(20);


-- inserting data

UPDATE SALES
SET month_name=monthname(DATE);


-- EXPLORATORY DATA ANALYSIS (EDA)

-- Business Questions To Answer


-- Generic Question

-- 1) How many unique cities does the data have?

SELECT COUNT(DISTINCT(CITY)) AS unique_city_of_data
FROM SALES;


-- 2) In which city is each branch?

SELECT CITY,BRANCH
FROM SALES
GROUP BY CITY,BRANCH;



-- Product


-- How many unique product lines does the data have?

SELECT COUNT(DISTINCT(PRODUCT_LINE)) AS UNIQUE_PRODUCT_LINE_IN_DATA
FROM SALES;

-- What is the most common payment method?

SELECT T.PAYMENT AS MOST_COMMON_PAYMENT_METHOD
FROM
(SELECT PAYMENT,COUNT(*)
FROM SALES
GROUP BY PAYMENT
ORDER BY COUNT(*) DESC
LIMIT 1) AS T;


-- What is the most selling product line?


SELECT T.PRODUCT_LINE AS MOST_SELLING_PRODUCT_LINE
FROM(
SELECT PRODUCT_LINE,COUNT(*)
FROM SALES
GROUP BY PRODUCT_LINE
ORDER BY COUNT(*) DESC
LIMIT 1) AS T;



-- What is the total revenue by month?

SELECT MONTH_NAME,SUM(TOTAL) AS REVENUE
FROM SALES
GROUP BY MONTH_NAME;


-- What month had the largest COGS?

SELECT T.MONTH_NAME AS MONTH_WITH_LARGEST_COGS
FROM
(
SELECT MONTH_NAME,SUM(COGS)
FROM SALES
GROUP BY MONTH_NAME
ORDER BY SUM(COGS) DESC
LIMIT 1
) AS T;


-- What product line had the largest revenue?

SELECT T.PRODUCT_LINE AS PRODUCT_LINE_WITH_LARGEST_REVENUE
FROM(
SELECT PRODUCT_LINE,SUM(TOTAL)
FROM SALES
GROUP BY PRODUCT_LINE
ORDER BY SUM(TOTAL) DESC
LIMIT 1
) AS T;


-- What is the city with the largest revenue?

SELECT T.CITY AS CITY_WITH_LARGEST_REVENUE
FROM(
SELECT CITY,SUM(TOTAL)
FROM SALES
GROUP BY CITY
ORDER BY SUM(TOTAL) DESC
LIMIT 1
) AS T;


-- What product line had the largest VAT?

SELECT T.PRODUCT_LINE AS LARGEST_VAT_PRODUCT_LINE
FROM(
SELECT PRODUCT_LINE,AVG(TAX_PCT)
FROM SALES
GROUP BY PRODUCT_LINE
ORDER BY AVG(TAX_PCT) DESC
LIMIT 1
) AS T;


-- Fetch each product line and add a column to those product line showing
-- "Good", "Bad". Good if its greater than average sales


SELECT T.PRODUCT_LINE,
CASE
	WHEN T.AVG_TOTAL>(SELECT AVG(QUANTITY) FROM SALES) THEN 'Good'
    ELSE 'Bad'
END AS REMARKS
FROM (
	SELECT PRODUCT_LINE,AVG(QUANTITY) AS AVG_TOTAL
    FROM SALES
    GROUP BY PRODUCT_LINE
) AS T
GROUP BY T.PRODUCT_LINE;


-- Which branch sold more products than average product sold?

SELECT T.BRANCH
FROM(
SELECT BRANCH,SUM(QUANTITY) AS AVG_QUANTITY
FROM SALES
GROUP BY BRANCH
) AS T
WHERE T.AVG_QUANTITY>(SELECT AVG(QUANTITY) FROM SALES);



-- What is the most common product line by gender?


SELECT T.GENDER,T.PRODUCT_LINE
FROM(
SELECT GENDER,PRODUCT_LINE,COUNT(GENDER)
FROM SALES
GROUP BY GENDER,PRODUCT_LINE
ORDER BY COUNT(GENDER) DESC
LIMIT 1) AS T;

-- What is the average rating of each product line?

SELECT PRODUCT_LINE,AVG(RATING) AS AVERAGE_RATING
FROM SALES
GROUP BY PRODUCT_LINE;


-- SALES --


-- Number of sales made in each time of the day per weekday

SELECT DAY_NAME,TIME_OF_DAY,SUM(QUANTITY) AS NUM_OF_SALES_MADE
FROM SALES
WHERE DAY_NAME NOT IN('SATURDAY','SUNDAY')
GROUP BY DAY_NAME,TIME_OF_DAY 
ORDER BY 
CASE DAY_NAME
        WHEN 'MONDAY' THEN 1
        WHEN 'TUESDAY' THEN 2
        WHEN 'WEDNESDAY' THEN 3
        WHEN 'THURSDAY' THEN 4
        WHEN 'FRIDAY' THEN 5
END,
CASE
WHEN TIME_OF_DAY='MORNING' THEN 1
WHEN TIME_OF_DAY='AFTERNOON' THEN 2
WHEN TIME_OF_DAY='EVENING' THEN 3
END;


-- Which of the customer types brings the most revenue?

SELECT DISTINCT(CUSTOMER_TYPE)
FROM SALES;

SELECT CUSTOMER_TYPE,SUM(TOTAL) AS REVENUE
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY REVENUE DESC;

SELECT T.CUSTOMER_TYPE
FROM(
SELECT CUSTOMER_TYPE,SUM(TOTAL) AS REVENUE
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY REVENUE DESC
LIMIT 1
) AS T;


-- Which city has the largest tax percent/ VAT (Value Added Tax)?

SELECT CITY,ROUND(AVG(TAX_PCT),2) AS AVG_TAX_PERCENTAGE
FROM SALES
GROUP BY CITY
ORDER BY AVG(TAX_PCT) DESC;

SELECT T.CITY
FROM(
SELECT CITY,ROUND(AVG(TAX_PCT),2) AS AVG_TAX_PERCENTAGE
FROM SALES
GROUP BY CITY
ORDER BY AVG(TAX_PCT) DESC
LIMIT 1) AS T;

-- Which customer type pays the most in VAT?


SELECT CUSTOMER_TYPE,ROUND(AVG(TAX_PCT),2) AS AVG_TAX_PERCENTAGE
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY AVG(TAX_PCT) DESC;



SELECT T.CUSTOMER_TYPE
FROM(
SELECT CUSTOMER_TYPE,ROUND(AVG(TAX_PCT),2) AS AVG_TAX_PERCENTAGE
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY AVG(TAX_PCT) DESC
LIMIT 1
) AS T;


-- CUSTOMER--


-- How many unique customer types does the data have?

SELECT COUNT(DISTINCT(CUSTOMER_TYPE)) AS COUNT_OF_UNIQUE_CUSTOMER_TYPES
FROM SALES;

-- How many unique payment methods does the data have?

SELECT COUNT(DISTINCT(PAYMENT)) AS COUNT_OF_UNIQUE_PAYMENT_METHODS
FROM SALES;

-- What is the most common customer type?

SELECT CUSTOMER_TYPE,COUNT(*)
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY COUNT(*) DESC;

SELECT T.CUSTOMER_TYPE AS MOST_COMMON_CUSTOMER_TYPE
FROM(
SELECT CUSTOMER_TYPE,COUNT(*)
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY COUNT(*) DESC
LIMIT 1
) AS T;

-- Which customer type buys the most?

SELECT CUSTOMER_TYPE,SUM(TOTAL)
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY SUM(TOTAL) DESC;

SELECT T.CUSTOMER_TYPE AS CUSTOMER_TYPE_THAT_BUYS_THE_MOST
FROM(
SELECT CUSTOMER_TYPE,SUM(TOTAL)
FROM SALES
GROUP BY CUSTOMER_TYPE
ORDER BY SUM(TOTAL) DESC
LIMIT 1) AS T;

-- What is the gender of most of the customers?

SELECT GENDER,COUNT(*)
FROM SALES
GROUP BY GENDER
ORDER BY COUNT(*) DESC;


SELECT T.GENDER AS GENDER_MOST_OF_CUSTOMER
FROM (
SELECT GENDER,COUNT(*)
FROM SALES
GROUP BY GENDER
ORDER BY COUNT(*) DESC
LIMIT 1

) AS T;

-- What is the gender distribution per branch?


SELECT BRANCH,GENDER,COUNT(GENDER) AS NUMBER
FROM SALES 
GROUP BY BRANCH,GENDER
ORDER BY BRANCH;


-- Which time of the day do customers give most ratings?

SELECT TIME_OF_DAY,AVG(RATING)
FROM SALES
GROUP BY TIME_OF_DAY
ORDER BY AVG(RATING) DESC;

SELECT T.TIME_OF_DAY AS TIME_OF_DAY_IN_WHICH_CUSTOMER_GIVES_MOST_RATING
FROM(
SELECT TIME_OF_DAY,AVG(RATING)
FROM SALES
GROUP BY TIME_OF_DAY
ORDER BY AVG(RATING) DESC
LIMIT 1
) AS T;

-- Which time of the day do customers give most ratings per branch?



SELECT BRANCH,TIME_OF_DAY,AVG(RATING)
FROM SALES
GROUP BY BRANCH,TIME_OF_DAY
ORDER BY BRANCH;


-- Which day of the week has the best avg ratings?

SELECT DAY_NAME,AVG(RATING)
FROM SALES
GROUP BY DAY_NAME
ORDER BY AVG(RATING) DESC;


SELECT T.DAY_NAME AS DAY_WITH_BEST_AVERAGE_RATING
FROM
(
SELECT DAY_NAME,AVG(RATING)
FROM SALES
GROUP BY DAY_NAME
ORDER BY AVG(RATING) DESC
LIMIT 1
) AS T;



-- Which day of the week has the best average ratings per branch?

SELECT BRANCH,DAY_NAME,AVG(RATING)
FROM SALES
GROUP BY BRANCH,DAY_NAME
ORDER BY AVG(RATING) DESC;



